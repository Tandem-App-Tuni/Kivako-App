// =========================================== FUNCTIONS ======================================
    // Load possible matches list
    loadDataPossibleUserMatches(){
        // http://localhost:3000/api/v1/usersMatch/possibleMatchs
        const url = new URL(window.location.protocol + '//' + window.location.hostname + ":3000/api/v1/usersMatch/possibleMatchs")
        console.log(url)
        fetch(url, {
        method: 'GET',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        }).then((response) => response.json())
        .then((responseJson) => {
            console.log(responseJson);
        })
        .catch((error) => {
            console.error(error);
        });
       
    }

    // Send a new match invitation
    requestNewUserMatch(){
        // http://localhost:3000/api/v1/usersMatch/sendRequest
        // The requester user ID will be collect automatic by the server
        const url = new URL(window.location.protocol + '//' + window.location.hostname + ":3000/api/v1/usersMatch/sendRequest")
        console.log(url)
        fetch(url, {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            recipientUserID: this.state.recipientUserID,//User that will receive the request
        })
        }).then((response) => response.json())
        .then((responseJson) => {
            console.log(responseJson);
        })
        .catch((error) => {
            console.error(error);
        });
    }

    // Get all the match requests made to the user by other users
    getMatchRequestsReceivedByTheUser(){
        // http://localhost:3000/api/v1/usersMatch/receiptMatchsRequests
        const url = new URL(window.location.protocol + '//' + window.location.hostname + ":3000/api/v1/usersMatch/receiptMatchsRequests")
        console.log(url)
        fetch(url, {
        method: 'GET',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        }).then((response) => response.json())
        .then((responseJson) => {
            console.log(responseJson);
        })
        .catch((error) => {
            console.error(error);
        });
       
    }

    // Get the match requests made by the user to other users
    getMatchRequestsRequestedByTheUser(){
        // http://localhost:3000/api/v1/usersMatch/requestedMatchsRequests
        const url = new URL(window.location.protocol + '//' + window.location.hostname + ":3000/api/v1/usersMatch/requestedMatchsRequests")
        console.log(url)
        fetch(url, {
        method: 'GET',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        }).then((response) => response.json())
        .then((responseJson) => {
            console.log(responseJson);
        })
        .catch((error) => {
            console.error(error);
        });
       
    }

    // Get the current matches of the user
    getUserCurrentMatchs(){
        // http://localhost:3000/api/v1/usersMatch/getUserActiveMatches
        const url = new URL(window.location.protocol + '//' + window.location.hostname + ":3000/api/v1/usersMatch/getUserActiveMatches")
        console.log(url)
        fetch(url, {
        method: 'GET',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        }).then((response) => response.json())
        .then((responseJson) => {
            console.log(responseJson);
        })
        .catch((error) => {
            console.error(error);
        });
        
    }

    acceptNewMatchRequest(){
        // need the match ID
        const matchID = 123456;

        // http://localhost:3000/api/v1/usersMatch/acceptMatchRequest/:matchid
        const url = new URL(window.location.protocol + '//' + window.location.hostname + ":3000/api/v1/usersMatch/acceptMatchRequest"+matchID);
        
        console.log(url)
        fetch(url, {
        method: 'GET',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        }).then((response) => response.json())
        .then((responseJson) => {
            console.log(responseJson);
        })
        .catch((error) => {
            console.error(error);
        });
        
    }

    denyNewMatchRequest(){
        // need the match ID
        const matchID = 123456;

        // http://localhost:3000/api/v1/usersMatch/denyMatchRequest/:matchid
        const url = new URL(window.location.protocol + '//' + window.location.hostname + ":3000/api/v1/usersMatch/denyMatchRequest"+matchID);
        
        console.log(url)
        fetch(url, {
        method: 'GET',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        }).then((response) => response.json())
        .then((responseJson) => {
            console.log(responseJson);
        })
        .catch((error) => {
            console.error(error);
        });
        
    }

// ================================================================================================
    getUserPossibleMatchsList = () =>{
        const url = new URL(window.location.protocol + '//' + window.location.hostname + ":3000/api/v1/usersMatch/possibleMatchs");
    
        fetch(url, {
            method: 'GET',
            credentials: 'include',
            cors:'no-cors'
        }).then((response) => response.json())
        .then((responseJson) => {
            // Resposta
            console.log(responseJson);
        }).catch((error) => {
            console.error(error);
        });
    };





     <List className={classesTest.root} style={{maxHeight: '100%', overflow: 'auto'}} >
                    <ListItem alignItems="flex-start">
                        <ListItemAvatar>
                        <Avatar alt="Remy Sharp" src="/static/images/avatar/1.jpg" />
                        </ListItemAvatar>
                        <ListItemText
                        primary="Brunch this weekend?"
                        secondary={
                            <React.Fragment>
                            <Typography
                                component="span"
                                variant="body2"
                                className={classes.inline}
                                color="textPrimary"
                            >
                                Ali Connors
                            </Typography>
                            {" — I'll be in your neighborhood doing errands this…"}
                            </React.Fragment>
                        }
                        />
                    </ListItem>
                    <Divider variant="inset" component="li" />
                    
        </List>



getMatchesTiles(item, classes) {
        const classesTest =makeStyles(theme => ({
            root: {
              width: '100%',
              maxWidth: 360,
              backgroundColor: theme.palette.background.paper,
            },
            inline: {
              display: 'inline',
            },
          }));

        return (
            item.matches.length === 0 ? (
                <Typography variant="h5" gutterBottom>
                    <Typography variant="overline" gutterBottom>
                        {"No_matches_found_for"} {item.languageName}
                    </Typography>
                    <Link href="/languagePreferences" className={classes.preferencesLink}>
                        {"Edit_your_preferences"}
                    </Link>
                </Typography>
            ) : (
                <div className={classes.fullWidth}>
                    <GridList className={classes.gridList}>
                        {
                            item.matches.map((match, key) =>
                                <GridListTile key={key}
                                              className={classes.gridListTile}>
                                    <Typography variant="overline" gutterBottom>
                                        {match.user.name}
                                    </Typography>  
                                <GridListTileBar
                                        //   title={"aaa"}
                                        classes={{
                                            root: classes.titleBar,
                                            title: classes.title,
                                        }}
                                        actionIcon={
                                            <Button variant="contained" color = "primary" onClick = {this.onInviteAction.bind(this, match)}>
                                                Invite 
                                            </Button>
                                        }
                                    />
                                </GridListTile>
                            )
                        }
                    </GridList>
                </div>
            )
        )
    }











    <Card className={classes.card}>
      <CardHeader
        avatar={
          <Avatar aria-label="recipe" className={classes.avatar}>
            R
          </Avatar>
        }
        action={
          <IconButton aria-label="settings">
            <MoreVertIcon />
          </IconButton>
        }
        title="Shrimp and Chorizo Paella"
        subheader="September 14, 2016"
      />
      <CardMedia
        className={classes.media}
        image="/static/images/cards/paella.jpg"
        title="Paella dish"
      />
      <CardContent>
        <Typography variant="body2" color="textSecondary" component="p">
          This impressive paella is a perfect party dish and a fun meal to cook together with your
          guests. Add 1 cup of frozen peas along with the mussels, if you like.
        </Typography>
      </CardContent>
      <CardActions disableSpacing>
        <IconButton aria-label="add to favorites">
          <FavoriteIcon />
        </IconButton>
        <IconButton aria-label="share">
          <ShareIcon />
        </IconButton>
        <IconButton
          className={clsx(classes.expand, {
            [classes.expandOpen]: expanded,
          })}
          onClick={handleExpandClick}
          aria-expanded={expanded}
          aria-label="show more"
        >
          <ExpandMoreIcon />
        </IconButton>
      </CardActions>
    </Card>









    <Card className={classesTest.card}>
                                    <CardActionArea>
                                    <CardMedia
                                        className={classesTest.media}
                                        image="/static/images/cards/contemplative-reptile.jpg"
                                        title="Contemplative Reptile"
                                    />
                                    <CardContent>
                                        <Typography gutterBottom variant="h5" component="h2">
                                        {match.user.name}
                                        </Typography>
                                        <Typography variant="body2" color="textSecondary" component="p">
                                        Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging
                                        across all continents except Antarctica
                                        </Typography>
                                    </CardContent>
                                    </CardActionArea>
                                    <CardActions>
                                    <Button size="small" color="primary">
                                        Share
                                    </Button>
                                    <Button size="small" color="primary">
                                        Learn More
                                    </Button>
                                    </CardActions>
                                </Card>




<div className={gridListStyle.root}>>
                    <GridList className={gridListStyle.gridList} cols={4}>
                        {
                            item.matches.map((match, key) =>
                                <Card className={cardStyle.card}>
                                <CardHeader
                                avatar={
                                    <Avatar aria-label="recipe" className={cardStyle.avatar}>
                                        R
                                    </Avatar>
                                }
                                action={
                                    <IconButton aria-label="settings">
                                    <MoreVertIcon />
                                    </IconButton>
                                }
                                title="Shrimp and Chorizo Paella"
                                subheader="September 14, 2016"
                                />
                                <CardMedia
                                className={cardStyle.media}
                                image="https://pickaface.net/gallery/avatar/unr_test_161024_0535_9lih90.png"
                                title="Paella dish"
                                />
                                <CardContent>
                                <Typography variant="body2" color="textSecondary" component="p">
                                    This impressive paella is a perfect party dish and a fun meal to cook together with your
                                    guests. Add 1 cup of frozen peas along with the mussels, if you like.
                                </Typography>
                                </CardContent>
                                <CardActions disableSpacing>
                                <IconButton aria-label="add to favorites">
                                    <FavoriteIcon />
                                </IconButton>
                                <IconButton aria-label="share">
                                    <ShareIcon />
                                </IconButton>
                                </CardActions>
                            </Card>
                            
                            )
                        }
                    </GridList>
                </div>